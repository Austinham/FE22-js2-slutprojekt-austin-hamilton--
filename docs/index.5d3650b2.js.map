{"mappings":"AAAO,MACDA,EAAkB,gFACxBC,QAAQC,IAAIF,GAGSG,SAASC,cAAc,kBACnBD,SAASC,cAAc,sBADhD,MAEMC,EAAcF,SAASC,cAAc,aACrCE,EAAeH,SAASC,cAAc,cAGtCG,EAAcJ,SAASC,cAAc,kBAIrCI,GAFeL,SAASC,cAAc,gBACnBD,SAASC,cAAc,oBACxBD,SAASC,cAAc,uBAEzCK,EAAgBN,SAASO,iBAAiB,WAG1CC,EAAeR,SAASC,cAAc,sBACtCQ,EAAYT,SAASC,cAAc,UAEzCO,EAAaE,MAAMC,QAAU,OAG7B,MAAMC,EAAwB,GAE9BN,EAAcO,SAASC,IACrBA,EAAOC,iBAAiB,SAAQ,KAC9BH,EAAWI,QACXJ,EAAWK,KAAKH,EAAOI,MAAK,GAC9B,IAGFf,EAAaY,iBAAiB,SAASI,IACrCA,EAAEC,iBACFX,EAAUC,MAAMC,QAAU,QAC1BH,EAAaE,MAAMC,QAAU,UAI/BN,EAAgBU,iBAAiB,SAAUI,IACzCA,EAAEC,iBACFX,EAAUC,MAAMC,QAAU,OAC1BH,EAAaE,MAAMC,QAAU,WAM/BP,GAAaW,iBAAiB,SAE9BM,eAA8BF,GAC5BA,EAAEC,iBAEF,MAAME,EAAetB,SAASC,cAAc,gBACtCsB,EAAmBvB,SAASC,cAAc,oBAG1CuB,GAFgBxB,SAASC,cAAc,kBAEfqB,EAAaJ,OACrCO,EAAwBF,EAAiBL,MAIzCQ,EAAa,CACjBC,SAAUH,EACVI,SAAUH,EACVI,MAAOjB,EAAW,IAGdkB,EAAO,CACXC,OAAQ,OACRC,KAAMC,KAAKC,UAAUR,GACrBS,QAAS,CACP,eAAgB,oCAIdC,QAAiBC,MAAMxC,EAASiC,GACtC,GAAwB,MAApBM,EAASE,QAAsC,MAApBF,EAASE,OAAgB,CAEtDxC,QAAQC,IAAI,gCAEZ,MAAMwC,EAAiBvC,SAASwC,cAAc,OAC9CD,EAAeE,UAAY,8CAC3BF,EAAe7B,MAAMgC,MAAQ,QAC7B,MAAMC,EAAe3C,SAASC,cAAc,sBAC5C0C,EAAaC,eAAeC,aAAaN,EAAgBI,EAAaG,YACxE,KAAO,CAELhD,QAAQC,IAAI,2BAEZ,MAAMgD,EAAe/C,SAASwC,cAAc,OAC5CO,EAAaN,UAAY,oEACzBM,EAAarC,MAAMgC,MAAQ,MAC3B,MAAMC,EAAe3C,SAASC,cAAc,sBAC5C0C,EAAaC,eAAeC,aAAaE,EAAcJ,EAAaG,YACtE,CACF,IAIA5C,EAAYa,iBAAiB,SAE7BM,eAAiC2B,GAC/BA,EAAM5B,iBAGN,IACI,MAAMgB,QAAiBC,MAAMxC,IAwBnC,SAAuBoD,GACrB,MAAMC,EAAoFC,OAAOC,QAAQH,GAAMI,KAAI,EAAEC,EAAIC,MAAW,C,GAAED,KAAOC,MAC7IzD,QAAQC,IAAImD,EAAa,8BACzB,MAAM1B,EAAwBxB,SAAUC,cAAc,kBAAuCiB,MACvFO,EAAwBzB,SAAUC,cAAc,sBAA2CiB,MACjGpB,QAAQC,IAAIkD,EAAK,QACjB,IAAK,IAAIO,EAAI,EAAGA,EAAIN,EAAaO,OAAQD,IACrC,GAAIhC,IAAkB0B,EAAaM,GAAG7B,UAAYF,IAAkByB,EAAaM,GAAG5B,SAIhF,OAHF8B,aAAaC,QAAQ,eAAgB1B,KAAKC,UAAUgB,EAAaM,KAC/DI,OAAOC,SAASC,OAAO,4BACvBhE,QAAQC,IAAImD,EAAaM,GAAGF,GAAG,WAIvCS,MAAM,kBACR,CArCMC,OADmB5B,EAAS6B,OAEhC,CAAE,MAAOC,GACLpE,QAAQC,IAAImE,EAChB,CACF","sources":["Documents/GitHub/frontend-22-VC-/FE22-js2-slutprojekt-austin-hamilton--/src/modules/index.ts"],"sourcesContent":["export const url: string = `https://login-2c7ee-default-rtdb.europe-west1.firebasedatabase.app/`;\nconst baseurl: string = `${url}users.json`;\nconsole.log(baseurl);\n\n//login with email and password selection\nconst existingName = document.querySelector('#loginUserName') as HTMLInputElement ;\nconst existingPassword = document.querySelector('#loginUserPassword') as HTMLInputElement ;\nconst loginButton = document.querySelector('#loginBtn') as HTMLElement;\nconst signedInLink = document.querySelector('#loginLink') as HTMLAnchorElement;\n\n//create account button\nconst makeAccount = document.querySelector('#createAccount') as HTMLElement;\n//register selections for password/username\nconst registerName = document.querySelector('#signup-Name') as HTMLInputElement;\nconst registerPassword = document.querySelector('#signup-Password') as HTMLInputElement ;\nconst registerAccount = document.querySelector('#createAccountLink') as HTMLInputElement;\n\nconst avatarChoices = document.querySelectorAll('.avatar') as NodeListOf<HTMLInputElement>;\n// styles selection\n\nconst registerForm = document.querySelector('#createAccountForm') as HTMLElement;\nconst loginForm = document.querySelector('#login') as HTMLElement;\n\nregisterForm.style.display = 'none';\n\n// Register the user\nconst pickAvatar: string [] = [];\n\navatarChoices.forEach((avatar) =>{\n  avatar.addEventListener('click',() => {\n    pickAvatar.shift();\n    pickAvatar.push(avatar.value)\n  })\n})\n\nsignedInLink.addEventListener('click',(e) => {\n  e.preventDefault();\n  loginForm.style.display = 'block';\n  registerForm.style.display = 'none';\n\n})\n\nregisterAccount.addEventListener('click', (e) => {\n  e.preventDefault();\n  loginForm.style.display = 'none';\n  registerForm.style.display = 'block';\n});\n\n\n//make account \n\nmakeAccount?.addEventListener('click', maketheAccount)\n\nasync function maketheAccount(e: Event): Promise<void> {\n  e.preventDefault();\n\n  const registerName = document.querySelector('#signup-Name') as HTMLInputElement;\n  const registerPassword = document.querySelector('#signup-Password') as HTMLInputElement;\n  const registerImage = document.querySelector('#image-section') as HTMLInputElement;\n\n  const userNameInput: string = registerName.value;\n  const passwordInput: string = registerPassword.value;\n\n\n\n  const newAccount = {\n    username: userNameInput,\n    password: passwordInput,\n    image: pickAvatar[0]\n  };\n\n  const init = {\n    method: 'POST',\n    body: JSON.stringify(newAccount),\n    headers: {\n      'Content-type': 'application/json; charset=UTF-8'\n    }\n  };\n\n  const response = await fetch(baseurl, init);\n  if (response.status === 200 || response.status === 201) {\n    // Account created successfully\n    console.log('Account created successfully');\n    // Show a success message to the user\n    const successMessage = document.createElement('div');\n    successMessage.innerText = 'Your account has been created successfully!';\n    successMessage.style.color = 'green';\n    const registerForm = document.querySelector('#createAccountForm') as HTMLElement;\n    registerForm.parentElement?.insertBefore(successMessage, registerForm.nextSibling);\n  } else {\n    // Account creation failed\n    console.log('Account creation failed');\n    // Show an error message to the user\n    const errorMessage = document.createElement('div');\n    errorMessage.innerText = 'There was an error creating your account. Please try again later.';\n    errorMessage.style.color = 'red';\n    const registerForm = document.querySelector('#createAccountForm') as HTMLElement;\n    registerForm.parentElement?.insertBefore(errorMessage, registerForm.nextSibling);\n  }\n}\n\n\n//check if user exists and is authenticated\nloginButton.addEventListener('click', loginVerification);\n\nasync function loginVerification(event: Event): Promise<void> {\n  event.preventDefault();\n  \n\n  try {\n      const response = await fetch(baseurl);\n      const data = await response.json();\n      verifyProcess(data);\n  } catch (error) {\n      console.log(error);\n  }\n}\n\n//  function verifyProcess(data: { [key: string]: { username: string, password: string, image: string } }): void {\n// const listFromData: { username: string, password: string, image: string }[] = Object.values(data);\n// console.log(listFromData,'this is the list from data');\n// const userNameInput: string = (document.querySelector('#loginUserName') as HTMLInputElement).value;\n// const passwordInput: string = (document.querySelector('#loginUserPassword') as HTMLInputElement).value;\n// console.log(data,'2321');\n// for (let i = 0; i < listFromData.length; i++) {\n//     if (userNameInput === listFromData[i].username && passwordInput === listFromData[i].password) {\n//       localStorage.setItem('loggedInUser', JSON.stringify(listFromData[i]));\n//         window.location.assign('../html/signin.html');\n//         console.log('Welcome');\n//         return;\n//     }\n// }\n// alert('User not found.');\n// }\nfunction verifyProcess(data: { [key: string]: { username: string, password: string, image: string } }): void {\n  const listFromData: { id: string, username: string, password: string, image: string }[] = Object.entries(data).map(([id, user]) => ({ id, ...user }));\n  console.log(listFromData,'this is the list from data');\n  const userNameInput: string = (document.querySelector('#loginUserName') as HTMLInputElement).value;\n  const passwordInput: string = (document.querySelector('#loginUserPassword') as HTMLInputElement).value;\n  console.log(data,'2321');\n  for (let i = 0; i < listFromData.length; i++) {\n      if (userNameInput === listFromData[i].username && passwordInput === listFromData[i].password) {\n        localStorage.setItem('loggedInUser', JSON.stringify(listFromData[i]));\n          window.location.assign('../html/signin.html');\n          console.log(listFromData[i].id,'Welcome');\n          return;\n      }\n  }\n  alert('User not found.');\n}\n\n\n"],"names":["$264f856c68f71302$var$baseurl","console","log","document","querySelector","$264f856c68f71302$var$loginButton","$264f856c68f71302$var$signedInLink","$264f856c68f71302$var$makeAccount","$264f856c68f71302$var$registerAccount","$264f856c68f71302$var$avatarChoices","querySelectorAll","$264f856c68f71302$var$registerForm","$264f856c68f71302$var$loginForm","style","display","$264f856c68f71302$var$pickAvatar","forEach","avatar","addEventListener","shift","push","value","e","preventDefault","async","registerName","registerPassword","userNameInput","passwordInput","newAccount","username","password","image","init","method","body","JSON","stringify","headers","response","fetch","status","successMessage","createElement","innerText","color","registerForm","parentElement","insertBefore","nextSibling","errorMessage","event","data","listFromData","Object","entries","map","id","user","i","length","localStorage","setItem","window","location","assign","alert","$264f856c68f71302$var$verifyProcess","json","error"],"version":3,"file":"index.5d3650b2.js.map"}